17) Write YACC Specification to implement desk calculator and recognize a
valid Arithmetic expression.
Lex program –
%{
#include<stdio.h>
#include "calc.tab.h"
extern int yylval;
%}
%%
[0-9]+ { yylval=atoi(yytext);return NUMBER;}
[\t] ;
[\n] {return 0;}
. {return yytext[0];}
%%
int yywrap()
{
return 1;
}
Yacc program – %{
#include<stdio.h>
int flag=0;
%}
%token NUMBER
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'
%%
ArithmeticExpression: E{printf("\nResult=%d\n", $$);return 0;};
E:E'+'E {$$=$1+$3;}
|E'-'E {$$=$1-$3;}
|E'*'E {$$=$1*$3;}
|E'/'E {$$=$1/$3;}
|E'%'E {$$=$1%$3;}
|'('E')' {$$=$2;}
| NUMBER {$$=$1;}
;
%%
void main()
{
printf("\nEnter Any Arithmetic Expression which can have
operations Addition, Subtraction, Multiplication, Division,
Modulus and Round brackets:\n");
yyparse();
if(flag==0)
printf("\nEntered arithmetic expression is Valid\n\n");
}
void yyerror()
{
printf("\nEntered arithmetic expression is Invalid\n\n");
flag=1;
}


18). Write YACC Specification to to accept a binary number and convert it
into decimal number.
Lex Program –
%{
#include<stdio.h>
#include<stdlib.h>
#include"btod.tab.h"
extern int yylval;
%}
%%
[0] {yylval=0;return ZERO;}
[1] {yylval=1;return ONE;}
[ \t] {;}
\n {return 0;}
. {return yytext[0];}
%%
int yywrap()
{
return 1;
}
Yacc Program –
%{
#include<stdio.h>
#include<stdlib.h>
void yyerror(char *s);
%}
%token ZERO ONE
%%
N: L {printf("%d", $$);}
L: L B {$$=$1*2+$2;}
| B {$$=$1;}
B:ZERO {$$=$1;}
|ONE {$$=$1;};
%%
int main()
{
printf("Enter the binary number : ");
while(yyparse());
}
yyerror(char *s)
{
fprintf(stdout, "\n%s", s);
}



19). Write YACC Specification to recognize the strings of the language { a^n
b^n | n≥0 }.
Lex program –
%{
#include "anbn.tab.h"
%}
%%
[aA] {return A;}
[bB] {return B;}
\n {return NL;}
. {return yytext[0];}
%%
int yywrap()
{
return 1;
}
Yacc program –
%{
#include<stdio.h>
#include<stdlib.h>
%}
%token A B NL
%%
stmt: S NL { printf("valid string\n");exit(0); }
;
S: A S B |
;
%%
int yyerror(char *msg)
{
printf("invalid string\n");
exit(0);
}
main()
{
printf("enter the string\n");
yyparse();
}



20). Write YACC Specification to recognize all strings strings that starts and
ends with 0 or 1.
Lex program –
%{
#include<stdio.h>
#include<stdlib.h>
#include"01.tab.h"
extern int yylval;
%}
%%
[0] {yylval = 0; return ZERO;}
[1] {yylval = 1; return ONE;}
[.|\n] {yylval = 2; return 0;}
%%
int yywrap()
{
return 1;
}
Yacc program –
%{
#include<stdio.h>
#include <stdlib.h>
void yyerror(const char *str)
{
printf("\nSequence Rejected\n");
}
%}
%token ZERO ONE
%%
r : s {printf("\nSequence Accepted\n\n");}
;
s : n
| ZERO a
| ONE b
;
a : n a
| ZERO
;
b : n b
| ONE
;
n : ZERO
| ONE
;
%%
int main()
{
printf("\nEnter Sequence of Zeros and Ones : ");
yyparse();
printf("\n");
return 0;
}


21). Write YACC specification to convert an infix expression to a postfix
expression.
Lex program :
%{
#include"intopr.tab.h"
%}
%%
[0-9]+ {yylval=atoi(yytext); return NUMBER;}
.|\n return *yytext;
%%
int yywrap()
{
return 1;
}
Yacc program :
%{
#define YYSTYPE double
#include <stdio.h>
#include<ctype.h>
void yyerror(char *);
%}
%token NUMBER
%left '+' '-'
%left '*' '/'
%right UMINUS
%right '^'
%%
lines: E '\n' { printf("\n");}
|
;
E :E'+'E { printf("+");}
 |E'-'E { printf("-");}
 |E'*'E { printf("*");}
 |E'/'E { printf("/");}
 |'('E')'
 |NUMBER { printf("%d",yylval);}
 ;
%%
void yyerror(char *s)
{
fprintf(stderr, "%s\n", s);
}
int main(void)
{
printf("\nEnter the infix : ");
yyparse();
return 0;
}
